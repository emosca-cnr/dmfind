[{"path":"/articles/dmfind.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"dmfind: a network medicine tool for the analysis of omics data","text":"vignette describes use R package dmfind, implements network diffusion-based analysis omics data identification differentially enriched modules. tool implements functions : performing network diffusion (also known network propagation) one vectors gene-weights throughout interactome gene-gene interactions; defining ranked gene lists, genes prioritized according Network Smoothing Index (NSI), proportional gene-weights network proximity high gene-weights; assessing characteristics (top) networks defined top ranked genes, based proximity high scoring genes, enrichment high scoring genes, modularity number communities; obtaining functional cartography top networks; comparing multiple networks topology; visualizing top networks relations communities. use package please cite: Bersanelli*, Mosca*, et al., Network diffusion-based analysis high-throughput data detection differentially enriched modules. Sci Rep 6, 34841 (2016). https://doi.org/10.1038/srep34841","code":""},{"path":[]},{"path":"/articles/dmfind.html","id":"installation","dir":"Articles","previous_headings":"Getting started","what":"Installation","title":"dmfind: a network medicine tool for the analysis of omics data","text":"install package, start R enter:","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)){   install.packages(devtools) } devtools::install_github(\"emosca-cnr/NPATools\", build_vignettes=T) devtools::install_github(\"emosca-cnr/dmfind\", build_vignettes=T)"},{"path":"/articles/dmfind.html","id":"overview-of-the-workflow","dir":"Articles","previous_headings":"Getting started","what":"Overview of the workflow","title":"dmfind: a network medicine tool for the analysis of omics data","text":"typical steps followings: Definition input matrices; Calculation network-smoothing index; Definition top networks; Topological analysis. consider toy modular network 500 “genes” obtained using igraph::barabasi.game(), community enriched higher scores compared others.","code":""},{"path":"/articles/dmfind.html","id":"definition-of-the-input-matrices","dir":"Articles","previous_headings":"","what":"Definition of the input matrices","title":"dmfind: a network medicine tool for the analysis of omics data","text":"analysis requires following inputs: \\(\\mathbf{W}\\), \\(N \\times N\\) normalized adjacency matrix, represents interactions genes, e.g.: \\(\\mathbf{X}_0\\), \\(N \\times m\\) matrix column vectors \\(\\mathbf{x_0}\\) contain gene-related quantities; vector assign column \\(\\mathbf{X}_0\\) two classes, differential NSI. IMPORTANT: \\(\\mathbf{W}\\) \\(\\mathbf{X}_0\\) must defined identifiers; normalization adjacency matrix must done means function normalize_adj_mat(), requires binary adjacency matrix; relevance genes corresponding rows \\(\\mathbf{X}_0\\) proportional values, , higher better; negative values allowed.","code":"#> 6 x 6 sparse Matrix of class \"dgCMatrix\" #>            G1         G2         G3 G4         G5         G6 #> G1 .          0.06900656 0.04800154  . .          .          #> G2 0.06900656 .          0.04637389  . .          .          #> G3 0.04800154 0.04637389 .           . 0.04356068 0.05184758 #> G4 .          .          .           . .          .          #> G5 .          .          0.04356068  . .          0.07001400 #> G6 .          .          0.05184758  . 0.07001400 ."},{"path":"/articles/dmfind.html","id":"the-network-smoothing-index-nsi","dir":"Articles","previous_headings":"","what":"The network smoothing index (NSI)","title":"dmfind: a network medicine tool for the analysis of omics data","text":"network smoothing index (NSI) compares initial state \\(\\mathbf{x}_0\\) steady-state \\(\\mathbf{x}_s\\) reached network diffusion: \\[S_j(\\mathbf{x_0}) = \\frac{x_{sj}}{x_{0j}+\\epsilon}\\] parameter \\(\\epsilon\\) tunes relevance initial state. impact \\(\\epsilon\\) can assessed means function eval_eps(), finds optimal value \\(\\epsilon\\) takes account network proximity \\(\\mathbf{x_0}\\) values \\(\\mathbf{x_s}\\) values networks composed top \\(n\\) genes ranked \\(S\\). network proximity quantified \\(\\Omega\\) function (Bersanelli et al. 2016): \\[\\Omega (n) = \\mathbf{y}^T(n) \\cdot \\mathbf{}(n) \\cdot \\mathbf{y}(n)\\] calculated \\(\\mathbf{y} = \\mathbf{x_0}\\) \\(\\mathbf{y} = \\mathbf{x_s}\\). Let \\(O_{\\mathbf{x}_0}(\\epsilon)\\) \\(O_{\\mathbf{x}_s}(\\epsilon)\\) sums \\(\\Omega\\) values top ranking genes \\(\\{1, 2, ..., n\\}\\), calculated using \\(\\mathbf{x_0}\\) \\(\\mathbf{x_s}\\) respectively. optimal \\(\\epsilon\\) value found follows: \\[\\text{arg}\\,\\max\\limits_{\\epsilon}\\, \\Bigg( \\frac{O_{\\mathbf{x}_0}(\\epsilon)}{\\text{max} (O_{\\mathbf{x}_0}(\\epsilon))} + \\frac{O_{\\mathbf{x}_s}(\\epsilon)}{\\text{max}(O_{\\mathbf{x}_s}(\\epsilon)}\\Bigg)\\] see specific examples permutation-adjusted \\(S\\) differential \\(S\\).","code":""},{"path":"/articles/dmfind.html","id":"permutation-adjusted-s","dir":"Articles","previous_headings":"The network smoothing index (NSI)","what":"Permutation-adjusted \\(S\\);","title":"dmfind: a network medicine tool for the analysis of omics data","text":"Permutation-adjusted \\(S\\) defined : \\[Sp_j = S_j \\cdot -log_{10}(p_j)\\] \\(p\\) statistical assessment \\(S\\) based o vertex permutations applied \\(\\mathbf{X}_0\\) \\(\\mathbf{W}\\). input matrix \\(\\mathbf{X}_0\\) contains one (typically) columns type gene weights (e.g., \\(−\\text{log}_{10}(p)\\)): mentioned , must find value \\(\\epsilon\\). default behavior eval_eps() consists testing \\(\\epsilon\\) values lie two orders magnitude minimum strictly positive \\(\\mathbf{X}_0\\) values two orders magnitude maximum \\(\\mathbf{X}_0\\): case study obtain value 0.51, stored element ee$opt_eps. possible perform visual inspection effect \\(\\epsilon\\) \\(\\Omega\\) via plot_omega_eps() shows values \\(\\Omega\\) rank  values \\(O_{\\mathbf{x}_0}(\\epsilon))\\) \\(O_{\\mathbf{x}_s}(\\epsilon))\\)  permutation-based NSI calculated via calc_adjND(), use optimal \\(\\epsilon\\) value obtained consider 99 permutations vertices matched degree: result list contains input output quantities. main stuff one consider tuning permutation approach. Please read documentation ?calc_adjND().","code":"#> 6 x 1 sparse Matrix of class \"dgCMatrix\" #>             M #> G1 .          #> G2 0.02777778 #> G3 0.01388889 #> G4 .          #> G5 0.19444444 #> G6 . ee <- eval_eps(X0 = X0, W = W)  Generating epsilon based on X0 values... # orders of magnitude:  6  # values considered:  24 eps: 0.0001388889 0.0002496515 0.0004487462 0.000806617 0.001449887 0.002606157 0.004684544 0.008420423 0.01513563 0.02720616 0.04890281 0.08790234 0.1580036 0.28401 0.5105054 0.9176286 1.649429 2.964833 5.329259 9.579293 17.21869 30.95043 55.63311 100  Performing ND... optimal eps: 0.5105054 plot_omega_eps(ee) resSp <- calc_adjND(X0 = X0, W = W, eps = ee$opt_eps, bin_type = \"number\", method = \"d\", cut_par = 2, k=99) BPPARAM class: SerialParam   bpisup: FALSE; bpnworkers: 1; bptasks: 0; bpjobname: BPJOB   bplog: FALSE; bpthreshold: INFO; bpstopOnError: TRUE   bpRNGseed: ; bptimeout: 2592000; bpprogressbar: FALSE   bpexportglobals: TRUE; bpforceGC: FALSE   bplogdir: NA   bpresultdir: NA Permutation type: degree  Total permutations: 100  Minimum possible FDR: 0.01  cut_par: 2  bin_type: number  vertex sets and bins: 307 144  Min possible k: 5.550294e+249  ND over X0 permutations ND over W permutations calculation of S calculation of p-values #>  [1] \"X0\"   \"Xs\"   \"eps\"  \"S\"    \"pX0\"  \"pW\"   \"SpX0\" \"SpW\"  \"p\"    \"Sp\""},{"path":"/articles/dmfind.html","id":"differential-nsi-cases-vs-controls","dir":"Articles","previous_headings":"The network smoothing index (NSI)","what":"Differential NSI (cases vs controls)","title":"dmfind: a network medicine tool for the analysis of omics data","text":"differential NSI calculated comparing NSI two classes subjects, based average “profiles” \\(\\bar{\\mathbf{x}_{o1}\\) \\(\\bar{\\mathbf{x}_{o2}}\\): \\[\\Delta S_j = S_j (\\bar{\\mathbf{x}_{o2}}) - S_j (\\bar{\\mathbf{x}_{o1}})\\] case olumn input matrix \\(\\mathbf{X}_0\\) carries sample-level information (e.g., mutation profiles patients) averaged obtain \\(\\bar{\\mathbf{x}_{o1}}\\) \\(\\mathbf{x}_{o2}\\) according given partition subjects two classes. find appropriate \\(\\epsilon\\) values two classes, run eval_eps() \\(\\bar{\\mathbf{x}_{o1}}\\) \\(\\bar{\\mathbf{x}_{o2}}\\) : case study obtain value 1 10 respectively class 1 2. can now run analysis : result contain following quantities:","code":"#> 6 x 10 sparse Matrix of class \"dgCMatrix\" #>                        #> G1 . . . . . . 1 . . . #> G2 . . . . . . . . . . #> G3 1 1 1 1 1 . . . . . #> G4 . . . . . . . 1 . . #> G5 1 1 1 1 1 . . . . . #> G6 1 1 1 1 . . . . . . X0ds_means <- calc_X0_mean(X0 = X0ds, classes = classes) eeds <- eval_eps(X0 = X0ds_means, W = W, top = 100) enerating epsilon based on X0 values... # orders of magnitude:  5  # values considered:  20  eps: 0.002 0.003534632 0.006246812 0.01104009 0.01951133 0.03448268 0.0609418 0.1077034 0.190346 0.3364015 0.5945277 1.050718 1.856951 3.28182 5.800013 10.25046 18.11579 32.01633 56.58298 100  Performing ND... optimal eps: 1.050718 10.25046 resdS <- calc_dS(X0 = X0ds, W = W, classes = classes, eps = eeds$opt_eps) network diffusion calculation of dS #> [1] \"X0\"  \"Xs\"  \"eps\" \"S\"   \"dS\""},{"path":"/articles/dmfind.html","id":"visualization-of-the-nsi-values","dir":"Articles","previous_headings":"","what":"Visualization of the NSI values","title":"dmfind: a network medicine tool for the analysis of omics data","text":"now , focus results \\(Sp\\) analysis, functions described work analogously \\(Sp\\) \\(\\Delta S\\). results NSI calculation can visually explored throug function plot_NSI(). case \\(Sp\\) two interesting plots distribution \\(S\\) values p-value (“effect size” vs significance):  relation \\(S_p\\) initial state:  Note genes high initial value gets high \\(S_p\\). addition genes low initial value get high \\(S_p\\), implies network proximity genes high \\(\\mathbf{x}_0\\).","code":"plot_NSI(resSp, x=\"S\", y=\"p\") plot_NSI(resSp, x = \"X0\", y=\"Sp\")"},{"path":"/articles/dmfind.html","id":"definition-of-the-top-networks","dir":"Articles","previous_headings":"","what":"Definition of the top networks","title":"dmfind: a network medicine tool for the analysis of omics data","text":"package dmfind provides two types analysis guide choice “top” networks, networks contain interactions genes high \\(\\mathbf{X}_0\\): network resampling (NR), scores presence genes high NSI values network proximity; network enrichment (NE), scores network enrichment genes high \\(\\mathbf{X}_0\\); modularity analysis, scores network modularity analysis applied number top genes \\(S_p\\) \\(\\Delta S\\). human genome-wide analysis, typical number 500.","code":""},{"path":"/articles/dmfind.html","id":"network-resampling","dir":"Articles","previous_headings":"Definition of the top networks","what":"Network resampling","title":"dmfind: a network medicine tool for the analysis of omics data","text":"Network resampling can used asses presence significantly connected modules element nr_res$NRsummary contains NR results rank visual representation obtained plot_NR(): observe real \\(\\Omega\\) values begins clearly higher permuted values approximately 20 genes, indicates presence high scoring connected gene module:","code":"nr_res <- NR(G = bg, rankedVector = sort(resSp$Sp[, 1], decreasing = T)[1:50], k = 99) plot_NR(nr_res) #>        id rank rankingScore    omega p_val #> G5     G5    1    1.0000000 0.000000  1.00 #> G61   G61    2    0.6668873 0.000000  1.00 #> G286 G286    3    0.6622229 0.441628  1.00 #> G379 G379    4    0.6576295 1.099258  1.00 #> G284 G284    5    0.6263519 1.516964  0.52 #> G455 G455    6    0.5458936 1.878467  0.46 plot_NR(nr_res)"},{"path":"/articles/dmfind.html","id":"network-enrichment","dir":"Articles","previous_headings":"Definition of the top networks","what":"Network Enrichment","title":"dmfind: a network medicine tool for the analysis of omics data","text":"enrichment analysis assess extent top networks enriched high \\(\\mathbf{x}_0\\) values. Depending \\(\\mathbf{x}_0\\) defined, task can done means Representation Analysis (ORA) Gene Set Enrichment Analysis (GSEA). following example, explore enrichment networks formed top 50 genes \\(S_p\\), using GSEA: table ne_res$en_summary cotains results, , expected, show top networks highly enriched top scoring genes:","code":"ne_res <- assess_enrichment(G = bg, topList = names(sort(resSp$Sp[, 1], decreasing = T)[1:50]), X0Vector = setNames(X0[, 1], rownames(X0)), type = \"gsea\", minNetSize = 5, ranks = 1:50) #>    rank size        es      nes nperm p_val  adj_p_val q_val       FDRq tags tags_perc list_top #> 9    13   13 0.9868501 1.647037   100  0.01 0.01043084    NA 0.01002616    9 0.6923077       11 #> 20   24   24 0.9624399 1.645404   100  0.01 0.01043084    NA 0.01002616   11 0.4583333       14 #> 8    12   12 0.9886723 1.640034   100  0.01 0.01043084    NA 0.01002616    8 0.6666667        9 #> 14   18   18 0.9705192 1.638376   100  0.01 0.01043084    NA 0.01002616   10 0.5555556       14 #> 19   23   23 0.9586542 1.635739   100  0.01 0.01043084    NA 0.01002616   10 0.4347826       14 #> 23   27   27 0.9568215 1.633151   100  0.01 0.01043084    NA 0.01002616   13 0.4814815       15 #>    list_top_perc lead_edge #> 9     0.02439024 0.6954689 #> 20    0.03104213 0.4690671 #> 8     0.01995565 0.6712225 #> 14    0.03104213 0.5606877 #> 19    0.03104213 0.4439252 #> 23    0.03325942 0.4951083"},{"path":"/articles/dmfind.html","id":"comparison-of-nr-and-ne","dir":"Articles","previous_headings":"Definition of the top networks","what":"Comparison of NR and NE","title":"dmfind: a network medicine tool for the analysis of omics data","text":"results NR NE can combined find possible networks optimal based two analyses. case study found network composed top 24 genes associated significant p-values NR NE: result table reports statistics rank rank: function also produces figure NR_vs_NE.png.","code":"nr_ne_cmp <- cmp_top_net_scores(NRRes = nr_res, netEnrRes = ae_res) Smallest highest scoring network at rank:  24  Overlapping points detected, adding some jitter #>   rank p_val_NR   p_val_NE    score #> 1    5     0.52 0.02105263 1.219172 #> 2    6     0.46 0.01020408 1.524909 #> 3    7     0.32 0.01020408 1.658422 #> 4    8     0.17 0.01020408 1.894081 #> 5    9     0.17 0.01010101 1.897891 #> 6   10     0.15 0.01000000 1.948715"},{"path":"/articles/dmfind.html","id":"modularity-assessment","dir":"Articles","previous_headings":"Definition of the top networks","what":"Modularity assessment","title":"dmfind: a network medicine tool for the analysis of omics data","text":"function assess_modularity() quantifies community structure modularity among networks composed top ranking genes. another piece information can useful select top networks. example, study modularity top 50 genes sorted \\(Sp\\): output table trend modularity number communities various ranks top genes considered. results can plotted plot_modu_trend():","code":"assess_mod_res <- assess_modularity(G = bg, vertices = rownames(resSp$Sp)[order(-resSp$Sp[, 1])[1:50]], ranks = 1:50) #>   rank n_vertex n_edge  algorithm modularity n_community n_vertex_max n_edge_max algorithm_max #> 1    1        0      0 fastgreedy        NaN        -Inf            1          0    fastgreedy #> 2    2        0      0 fastgreedy        NaN        -Inf            1          0    fastgreedy #> 3    3        2      1   multilev  0.0000000           1            2          1      multilev #> 4    4        4      2 fastgreedy  0.5000000           2            2          1      multilev #> 5    5        5      3 fastgreedy  0.4444444           2            3          2      multilev #> 6    6        6      4 fastgreedy  0.4062500           3            4          3    fastgreedy #>   modularity_max n_community_max #> 1            NaN               1 #> 2            NaN               1 #> 3      0.0000000               1 #> 4      0.0000000               1 #> 5      0.0000000               1 #> 6      0.1666667               2 plot_modu_trend(assess_mod_res)"},{"path":"/articles/dmfind.html","id":"extraction-of-the-top-networks","dir":"Articles","previous_headings":"Definition of the top networks","what":"Extraction of the top networks","title":"dmfind: a network medicine tool for the analysis of omics data","text":"rank associated top networks one considers optimal, can extracted means extract_module(). consider top 120 genes \\(S_p\\):","code":"top_nets <- extract_module(graph = bg, selectedVertices = rownames(resSp$Sp)[order(-resSp$Sp[, 1])[1:20]], NSIRes = resSp, minSubnetSize = 2) #> IGRAPH 9e6700b UN-- 20 21 -- Barabasi graph #> + attr: name (g/c), power (g/n), m (g/n), zero.appeal (g/n), algorithm (g/c), name (v/c), #> | comm_id (v/n), X0 (v/n), Sp (v/n), S (v/n), p (v/n), subnetId (v/n), subnetSize (v/n) #> + edges from 9e6700b (vertex names): #>  [1] G3  --G5   G3  --G6   G5  --G6   G6  --G29  G5  --G58  G6  --G150 G150--G230 G58 --G284 #>  [9] G61 --G284 G61 --G286 G5  --G298 G5  --G379 G3  --G388 G286--G398 G388--G413 G5  --G417 #> [17] G286--G417 G29 --G445 G152--G455 G286--G455 G388--G476"},{"path":[]},{"path":"/articles/dmfind.html","id":"community-structure","dir":"Articles","previous_headings":"Topological charcaterization of top networks","what":"Community structure","title":"dmfind: a network medicine tool for the analysis of omics data","text":"function find_communities() runs series algorithms detect presence communities: element res_comm$info contains modularity score \\(Q\\) number communities: case fastgreedy algorithm found better partition number community, therefore assign results igraph object containing top networks:","code":"res_comm <- find_communities(top_nets) #>    algorithm modularity n #> 1 fastgreedy  0.5079365 5 #> 2   multilev  0.4682540 5 top_nets <- assign_communities(top_nets, res_comm$comm$fastgreedy)"},{"path":"/articles/dmfind.html","id":"functional-cartography","dir":"Articles","previous_headings":"Topological charcaterization of top networks","what":"Functional cartography","title":"dmfind: a network medicine tool for the analysis of omics data","text":"function functional_cartography() performs functional cartography analysis (Guimera Nunes Amaral 2005), gene scored participation coefficient \\(P\\) within module degree score, z-score (Guimera Nunes Amaral 2005) probability interaction (Joyce et al. 2010). values used classify genes 7 classes: ultra peripheral nodes (R1): nodes links within module; peripheral nodes (R2): nodes links within module; non-hubs connector nodes (R3): nodes many links modules; non-hubs kinless nodes (R4): nodes links homogeneously distributed among modules. provincial nodes (R5): hub nodes vast majority links within module (pc <= 0.3); connector hubs (R6): hubs many links modules (0.30 < pc <= 0.75); kinless hubs (R7): hubs links homogeneously distributed among modules (pc > 0.75). output igraph object given input addition vertex attributes R, P, wmd_score. dedicated function exist obtain functional cartography:","code":"top_nets <- functional_cartography(top_nets) #> IGRAPH 9e6700b UN-- 20 21 -- Barabasi graph #> + attr: name (g/c), power (g/n), m (g/n), zero.appeal (g/n), algorithm (g/c), name (v/c), #> | comm_id (v/n), X0 (v/n), Sp (v/n), S (v/n), p (v/n), subnetId (v/n), subnetSize (v/n), #> | R (v/c), P (v/n), wmd_score (v/n) #> + edges from 9e6700b (vertex names): #>  [1] G3  --G5   G3  --G6   G5  --G6   G6  --G29  G5  --G58  G6  --G150 G150--G230 G58 --G284 #>  [9] G61 --G284 G61 --G286 G5  --G298 G5  --G379 G3  --G388 G286--G398 G388--G413 G5  --G417 #> [17] G286--G417 G29 --G445 G152--G455 G286--G455 G388--G476 plot_fc(top_nets, labelBy = \"name\")"},{"path":"/articles/dmfind.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"dmfind: a network medicine tool for the analysis of omics data","text":"function plot_network() provides means produce network visualizations. Please read documentation (?plot_network) details. example, plot top network producing layout takes account community structure color community:  second example color \\(\\mathbf{X_0}\\) lastly \\(S_p\\):","code":"lo_tn <- plot_network(top_nets, vertex.size=5, colorQuant = T, colorBy = \"comm_id\", community = res_comm$comm$fastgreedy, pal=pals::alphabet(max(res_comm$comm$fastgreedy$membership)), labelBy = \"name\",  vertex.label.degree=pi/2, vertex.label.dist=1) plot_network(top_nets, vertex.size=5, colorQuant = T, colorBy = \"X0\", pal=pals::brewer.purples(3), lo = lo_tn, labelBy = \"name\", vertex.label.degree=pi/2, vertex.label.dist=1) plot_network(top_nets, vertex.size=5, colorQuant = T, colorBy = \"Sp\", pal=pals::brewer.purples(3), lo = lo_tn, labelBy = \"name\", vertex.label.degree=pi/2, vertex.label.dist=1)"},{"path":"/articles/dmfind.html","id":"interactome-derived-from-string-v12","dir":"Articles","previous_headings":"","what":"Interactome derived from STRING v12","title":"dmfind: a network medicine tool for the analysis of omics data","text":"package contains interactome derived STRING db v12.0 (Szklarczyk et al. 2022), consisting 17288 genes 174962 interactions. interactions confidence >=700 top 3 interactions confidence >=400 & < 700 considered. Confidence score calculated without text mining evidence, described URL https://string-db.org. Original protein identifiers mapped Entrez Gene identifiers using mappings provided STRING (https://string-db.org) NCBI (https://ftp.ncbi.nlm.nih.gov, download date 2023-09-19). interactome available igraph object: matrix \\(W\\) can derived follows:","code":"data(dmfind) string.v12.Entrez.ntm.700.400.k3 #> IGRAPH 6f011b4 UN-- 17288 174962 --  #> + attr: name (v/c), symbol (v/c), neighborhood (e/n), neighborhood_transferred (e/n), #> | fusion (e/n), cooccurence (e/n), homology (e/n), coexpression (e/n), #> | coexpression_transferred (e/n), experiments (e/n), experiments_transferred (e/n), #> | database (e/n), database_transferred (e/n), combined_score (e/n) #> + edges from 6f011b4 (vertex names): #>  [1] 1066--1571   1066--4353   1066--9      1066--978    1066--7365   1066--2990   1066--8824   #>  [8] 1066--7363   1066--1576   1066--10     1066--79799  1544--1548   1544--1571   1544--7498   #> [15] 1544--9      1544--1558   1544--56603  1544--1551   1544--8854   1544--7364   1544--316    #> [22] 1544--412    1544--220    1544--8644   1544--1559   1544--1562   1544--1555   1544--216    #> [29] 1544--1579   1544--3284   1544--6820   1544--29785  1544--284541 1544--340665 1544--1586   #> + ... omitted several edges A <- get.adjacency(string.v12.Entrez.ntm.700.400.k3, type = \"both\") W <- normalize_adj_mat(A)"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ettore Mosca. Author, maintainer. Valentina Nale. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bersanelli M, Mosca E, Remondini D, Castellani G, Milanesi L (2016). “Network diffusion-based analysis high-throughput data detection differentially enriched modules.” Scientific Reports, 6, 34841. doi: 10.1038/srep34841.","code":"@Article{,   title = {Network diffusion-based analysis of high-throughput data for the detection of differentially enriched modules},   author = {Matteo Bersanelli and Ettore Mosca and Daniel Remondini and Gastone Castellani and Luciano Milanesi},   journal = {Scientific Reports},   year = {2016},   volume = {6},   pages = {34841},   doi = {10.1038/srep34841}, }"},{"path":"/index.html","id":"dmfind---network-diffusion-based-analysis-of-omics-data-for-the-identification-of-differentially-enriched-modules","dir":"","previous_headings":"","what":"Network diffusion-based analysis of omics data","title":"Network diffusion-based analysis of omics data","text":"tool implements functions : performing network diffusion (also known network propagation) one vectors gene-weights throughout interactome gene-gene interactions; defining ranked gene lists, genes prioritized according Network Smoothing Index (NSI), proportional gene-weights network proximity high gene-weights; assessing characteristics (top) networks defined top ranked genes, based proximity high scoring genes, enrichment high scoring genes, modularity number communities; obtaining functional cartography top networks; comparing multiple networks topology; visualizing top networks relations communities. use package please cite: Bersanelli, M., Mosca, E., Remondini, D. et al. Network diffusion-based analysis high-throughput data detection differentially enriched modules. Sci Rep 6, 34841 (2016). https://doi.org/10.1038/srep34841","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Network diffusion-based analysis of omics data","text":"install package, start R enter: {r, eval=FALSE} (!requireNamespace(\"devtools\", quietly = TRUE)){   install.packages(devtools) } devtools::install_github(\"emosca-cnr/NPATools\", build_vignettes=T) devtools::install_github(\"emosca-cnr/dmfind\", build_vignettes=T)","code":""},{"path":"/reference/CCF.html","id":null,"dir":"Reference","previous_headings":"","what":"Connected component fraction — CCF","title":"Connected component fraction — CCF","text":"Connected component fraction","code":""},{"path":"/reference/CCF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connected component fraction — CCF","text":"","code":"CCF(x = NULL, min_size = 2)"},{"path":"/reference/CCF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connected component fraction — CCF","text":"x igraph object min_size min size connected component","code":""},{"path":"/reference/NR.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Resampling — NR","title":"Network Resampling — NR","text":"Network Resampling","code":""},{"path":"/reference/NR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Resampling — NR","text":"","code":"NR(G = NULL, rankedVector = NULL, k = 99, BPPARAM = NULL)"},{"path":"/reference/NR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Resampling — NR","text":"G igraph object rankedVector ranked named vector vertex scores; `names(rankedVector)` `V(G)$name` considered k number permutations BPPARAM optional BiocParallelParam instance determining parallel back-end used evaluation. NULL, parallel evaluation disabled using `SerialParam()`. See ?bplapply.","code":""},{"path":"/reference/NR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Resampling — NR","text":"list values","code":""},{"path":"/reference/calc_X0_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate X0 mean — calc_X0_mean","title":"Calculate X0 mean — calc_X0_mean","text":"Calculate X0 mean","code":""},{"path":"/reference/calc_X0_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate X0 mean — calc_X0_mean","text":"","code":"calc_X0_mean(X0 = NULL, classes = NULL)"},{"path":"/reference/calc_X0_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate X0 mean — calc_X0_mean","text":"X0 vector matrix composed column vectors initial  distribution information classes vector class labels columns X0. Values must equal 1 2","code":""},{"path":"/reference/calc_adjND.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of permutation-adjusted network smoothing index — calc_adjND","title":"Calculation of permutation-adjusted network smoothing index — calc_adjND","text":"Calculation permutation-adjusted network smoothing index","code":""},{"path":"/reference/calc_adjND.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of permutation-adjusted network smoothing index — calc_adjND","text":"","code":"calc_adjND(   X0 = NULL,   W = NULL,   eps = NULL,   k = 99,   BPPARAM = NULL,   bin_type = \"number\",   method = \"simple\",   cut_par = 20,   vertex_sets = NULL,   ... )"},{"path":"/reference/calc_adjND.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of permutation-adjusted network smoothing index — calc_adjND","text":"X0 input matrix W symmetrically normalized adjacency matrix W = D^-1 D^-1, see normalize_adj_mat function eps matrix eps values; columns X0; see eval_eps(). k number permutations BPPARAM optional BiocParallelParam instance determining parallel back-end used evaluation. NULL, parallel evaluation disabled using SerialParam(); See BiocParallel::bplapply() bin_type see NPATools::perm_vertices() method see NPATools::perm_vertices() cut_par see NPATools::perm_vertices() vertex_sets see NPATools::perm_vertices() network smoothing values (Xs) ... additional arguments passed NPATools::ND()","code":""},{"path":"/reference/calc_adjND.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of permutation-adjusted network smoothing index — calc_adjND","text":"list data frames","code":""},{"path":"/reference/calc_dS.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of delta network smoothing indexes — calc_dS","title":"Calculation of delta network smoothing indexes — calc_dS","text":"Calculation delta network smoothing indexes","code":""},{"path":"/reference/calc_dS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of delta network smoothing indexes — calc_dS","text":"","code":"calc_dS(X0 = NULL, W = NULL, classes = NULL, eps = NULL, ...)"},{"path":"/reference/calc_dS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of delta network smoothing indexes — calc_dS","text":"X0 input matrix W normalized adjancency matrix classes numeric vector {1,2} eps 1-row matrix two columns eps values class 1 2 respectively ... additional parameteres NPATools::ND()","code":""},{"path":"/reference/calc_omega_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of omega i (internal) — calc_omega_i","title":"Calculation of omega i (internal) — calc_omega_i","text":"Calculation omega (internal)","code":""},{"path":"/reference/calc_omega_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of omega i (internal) — calc_omega_i","text":"","code":"calc_omega_i(idx = NULL, Ai = NULL, dSprod = NULL)"},{"path":"/reference/calc_omega_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of omega i (internal) — calc_omega_i","text":"idx index Ai matrix dSprod matrix products delta S","code":""},{"path":"/reference/calc_omega_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of omega i (internal) — calc_omega_i","text":"n","code":""},{"path":"/reference/calculate_ccf.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the connected component fraction — calculate_ccf","title":"Calculate the connected component fraction — calculate_ccf","text":"Calculate connected component fraction","code":""},{"path":"/reference/calculate_ccf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the connected component fraction — calculate_ccf","text":"","code":"calculate_ccf(G = NULL, rankedVectorNames = NULL, min_size = 2)"},{"path":"/reference/calculate_ccf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the connected component fraction — calculate_ccf","text":"G igraph object rankedVectorNames ranked vector names min_size min size connected component","code":""},{"path":"/reference/calculate_ccf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the connected component fraction — calculate_ccf","text":"cff","code":""},{"path":"/reference/dS.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta Network Smoothing Index — dS","title":"Delta Network Smoothing Index — dS","text":"Delta Network Smoothing Index","code":""},{"path":"/reference/dS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta Network Smoothing Index — dS","text":"","code":"dS(X0 = NULL, Xs = NULL, classes = NULL, eps = NULL)"},{"path":"/reference/dS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta Network Smoothing Index — dS","text":"X0 input matrix Xs smoothed matrix classes vector classes, values must equal 1 2 eps numeric value","code":""},{"path":"/reference/dS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta Network Smoothing Index — dS","text":"named vector delta smoothing indexes","code":""},{"path":"/reference/dmfind_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo data — dmfind_demo","title":"Demo data — dmfind_demo","text":"Demo data","code":""},{"path":"/reference/dmfind_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo data — dmfind_demo","text":"","code":"dmfind_demo"},{"path":"/reference/dmfind_demo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo data — dmfind_demo","text":"object class list length 14.","code":""},{"path":"/reference/eval_eps.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the effect of epsilon on NSI — eval_eps","title":"Evaluate the effect of epsilon on NSI — eval_eps","text":"Evaluate effect epsilon NSI","code":""},{"path":"/reference/eval_eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the effect of epsilon on NSI — eval_eps","text":"","code":"eval_eps(   X0 = NULL,   Xs = NULL,   W = NULL,   eps = NULL,   G = NULL,   top = NULL,   eps.n = 4,   na = 2,   nb = 2 )"},{"path":"/reference/eval_eps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the effect of epsilon on NSI — eval_eps","text":"X0 initial condition matrix Xs network diffusion steady state; required W provided W symmetrically normalized adjacency matrix W = D^-1 D^-1, see normalize_adj_mat() function; required Xs provided eps optional vector epsilon values G igraph object top top genes consider eps.n number eps points every order magnitude na number orders magnitudes one detected X0 set max eps nb number orders magnitudes one detected X0 set min eps","code":""},{"path":"/reference/eval_eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the effect of epsilon on NSI — eval_eps","text":"list data frames","code":""},{"path":"/reference/extract_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction and plotting of connected subnetworks from a graph and a set of selected vertices — extract_module","title":"Extraction and plotting of connected subnetworks from a graph and a set of selected vertices — extract_module","text":"Extraction plotting connected subnetworks  graph set selected vertices","code":""},{"path":"/reference/extract_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction and plotting of connected subnetworks from a graph and a set of selected vertices — extract_module","text":"","code":"extract_module(   graph = NULL,   selectedVertices = NULL,   NSIRes = NULL,   column = 1,   minSubnetSize = 2 )"},{"path":"/reference/extract_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction and plotting of connected subnetworks from a graph and a set of selected vertices — extract_module","text":"graph igraph object selectedVertices subset vertices NSIRes result calc_adjND() calc_dS() column column consider among available elements calc_adjND() minSubnetSize minimum size subnetwork","code":""},{"path":"/reference/extract_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction and plotting of connected subnetworks from a graph and a set of selected vertices — extract_module","text":"subnetwork","code":""},{"path":"/reference/find_sign_conn_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding significant connected components — find_sign_conn_comp","title":"Finding significant connected components — find_sign_conn_comp","text":"Finding significant connected components","code":""},{"path":"/reference/find_sign_conn_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding significant connected components — find_sign_conn_comp","text":"","code":"find_sign_conn_comp(   NRsummary = NULL,   NRpThr = 0.05,   minRank = 50,   maxRank = 300 )"},{"path":"/reference/find_sign_conn_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding significant connected components — find_sign_conn_comp","text":"NRsummary data.frame NRsummary NRpThr threshold NR p value minRank minimum rank maxRank maximum rank","code":""},{"path":"/reference/find_sign_conn_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding significant connected components — find_sign_conn_comp","text":"significant connected component","code":""},{"path":"/reference/nsi.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Smoothing Index — nsi","title":"Network Smoothing Index — nsi","text":"Network Smoothing Index","code":""},{"path":"/reference/nsi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Smoothing Index — nsi","text":"","code":"nsi(X0 = NULL, Xs = NULL, eps = NULL)"},{"path":"/reference/nsi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Smoothing Index — nsi","text":"X0 input matrix/vector Xs smoothed matrix/vector eps numeric value","code":""},{"path":"/reference/nsi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Smoothing Index — nsi","text":"network smoothing index S","code":""},{"path":"/reference/omega.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of omega function — omega","title":"Calculation of omega function — omega","text":"Calculation omega function","code":""},{"path":"/reference/omega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of omega function — omega","text":"","code":"omega(G = NULL, u = NULL)"},{"path":"/reference/omega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of omega function — omega","text":"G igraph object; vertices names(u) considered u ranked named list; names must correspond V(G)$name","code":""},{"path":"/reference/omega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of omega function — omega","text":"omega","code":""},{"path":"/reference/omega_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of permuted omega function — omega_perm","title":"Calculation of permuted omega function — omega_perm","text":"Calculation permuted omega function","code":""},{"path":"/reference/omega_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of permuted omega function — omega_perm","text":"","code":"omega_perm(idx = NULL, dS = NULL, Ai = NULL)"},{"path":"/reference/omega_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of permuted omega function — omega_perm","text":"idx vector randomly resampled dS scores; dS scores vector; must names size vertices G Ai adjacency matrix relative elements dS names must dS's","code":""},{"path":"/reference/omega_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of permuted omega function — omega_perm","text":"vector permuted omega","code":""},{"path":"/reference/plot_NR.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of eval_eps — plot_NR","title":"Plot the results of eval_eps — plot_NR","text":"Plot results eval_eps","code":""},{"path":"/reference/plot_NR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of eval_eps — plot_NR","text":"","code":"plot_NR(nrRes = NULL, signCompTable = NULL)"},{"path":"/reference/plot_NR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of eval_eps — plot_NR","text":"nrRes result NR() signCompTable optional result find_sign_conn_comp()","code":""},{"path":"/reference/plot_NSI.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter Plot of NSI values — plot_NSI","title":"Scatter Plot of NSI values — plot_NSI","text":"Plot NSI","code":""},{"path":"/reference/plot_NSI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter Plot of NSI values — plot_NSI","text":"","code":"plot_NSI(nsiRes = NULL, x = \"X0\", y = NULL, column = 1, initSigGenes = NULL)"},{"path":"/reference/plot_NSI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter Plot of NSI values — plot_NSI","text":"nsiRes result calc_dS() cal_adjND() x put horizontal axis y put vertical axis column column consider initSigGenes optional vector initial sifnigicant genes","code":""},{"path":"/reference/plot_omega_eps.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of eval_eps — plot_omega_eps","title":"Plot the results of eval_eps — plot_omega_eps","text":"Plot results eval_eps","code":""},{"path":"/reference/plot_omega_eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of eval_eps — plot_omega_eps","text":"","code":"plot_omega_eps(evalEpsRes = NULL, column = 1, out_dir = NULL)"},{"path":"/reference/plot_omega_eps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of eval_eps — plot_omega_eps","text":"evalEpsRes Epsilon evaluation column columm evalEpsRes$csX0 evalEpsRes$csXs used out_dir output directory","code":""},{"path":"/reference/string.v12.Entrez.ntm.700.400.k3.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactome derived from STRING db v12.0\nigraph object with 17288 genes and 174962 interactions. Only interactions with confidence >=700 and the top 3 interactions with confidence >=400 & < 700 were considered. Confidence score was calculated without textmining, as described at the URL https://string-db.org). Original protein identifiers were mapped to Entrez Gene identifiers using mappings from NCBI Entrez (https://ftp.ncbi.nlm.nih.gov dowload date 2023-09-19) and https://string-db.org — string.v12.Entrez.ntm.700.400.k3","title":"Interactome derived from STRING db v12.0\nigraph object with 17288 genes and 174962 interactions. Only interactions with confidence >=700 and the top 3 interactions with confidence >=400 & < 700 were considered. Confidence score was calculated without textmining, as described at the URL https://string-db.org). Original protein identifiers were mapped to Entrez Gene identifiers using mappings from NCBI Entrez (https://ftp.ncbi.nlm.nih.gov dowload date 2023-09-19) and https://string-db.org — string.v12.Entrez.ntm.700.400.k3","text":"Interactome derived STRING db v12.0 igraph object 17288 genes 174962 interactions. interactions confidence >=700 top 3 interactions confidence >=400 & < 700 considered. Confidence score calculated without textmining, described URL https://string-db.org). Original protein identifiers mapped Entrez Gene identifiers using mappings NCBI Entrez (https://ftp.ncbi.nlm.nih.gov dowload date 2023-09-19) https://string-db.org","code":""},{"path":"/reference/string.v12.Entrez.ntm.700.400.k3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactome derived from STRING db v12.0\nigraph object with 17288 genes and 174962 interactions. Only interactions with confidence >=700 and the top 3 interactions with confidence >=400 & < 700 were considered. Confidence score was calculated without textmining, as described at the URL https://string-db.org). Original protein identifiers were mapped to Entrez Gene identifiers using mappings from NCBI Entrez (https://ftp.ncbi.nlm.nih.gov dowload date 2023-09-19) and https://string-db.org — string.v12.Entrez.ntm.700.400.k3","text":"","code":"string.v12.Entrez.ntm.700.400.k3"},{"path":"/reference/string.v12.Entrez.ntm.700.400.k3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Interactome derived from STRING db v12.0\nigraph object with 17288 genes and 174962 interactions. Only interactions with confidence >=700 and the top 3 interactions with confidence >=400 & < 700 were considered. Confidence score was calculated without textmining, as described at the URL https://string-db.org). Original protein identifiers were mapped to Entrez Gene identifiers using mappings from NCBI Entrez (https://ftp.ncbi.nlm.nih.gov dowload date 2023-09-19) and https://string-db.org — string.v12.Entrez.ntm.700.400.k3","text":"object class igraph length 17288.","code":""}]
